services:
  zookeeper:
    image: zookeeper:3.9
    container_name: zookeeper
    restart: unless-stopped
    ports: ["2181:2181"]

# --- KAFKA BROKER 1 ---
  
  kafka1:
    image: confluentinc/cp-kafka:7.7.5
    container_name: kafka1
    hostname: kafka1
    depends_on: [zookeeper]
    restart: unless-stopped
    ports:
      - "9092:9092"
    volumes:
      - ./kafka/security/kafka1:/etc/kafka/secrets:ro

    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # SSL listener only
      KAFKA_LISTENERS: SSL://0.0.0.0:9092
      # For host testing, advertise localhost; if only containers will connect, use SSL://kafka1:9093
      KAFKA_ADVERTISED_LISTENERS: SSL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL

      KAFKA_SSL_KEYSTORE_FILENAME: kafka.server.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: changeit
      KAFKA_SSL_KEY_PASSWORD: changeit
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: changeit
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka1_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka1_sslkey_creds
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1


  kafka2:
    image: confluentinc/cp-kafka:7.7.5
    container_name: kafka2
    hostname: kafka2
    depends_on: [zookeeper]
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./kafka/security/kafka2:/etc/kafka/secrets:ro
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_LISTENERS: SSL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: SSL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL
      # KAFKA_INTER_BROKER_LISTENER_NAME: SSL
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL

      KAFKA_SSL_KEYSTORE_FILENAME: kafka.server.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: changeit
      KAFKA_SSL_KEY_PASSWORD: changeit
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: changeit
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka2_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka2_sslkey_creds
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka3:
    image: confluentinc/cp-kafka:7.7.5
    container_name: kafka3
    hostname: kafka3
    depends_on: [zookeeper]
    restart: unless-stopped
    ports:
      - "9094:9094"
    volumes:
      - ./kafka/security/kafka3:/etc/kafka/secrets:ro
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_LISTENERS: SSL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: SSL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL
      # KAFKA_INTER_BROKER_LISTENER_NAME: SSL
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL

      KAFKA_SSL_KEYSTORE_FILENAME: kafka.server.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: changeit
      KAFKA_SSL_KEY_PASSWORD: changeit
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: changeit
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka3_keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: kafka3_sslkey_creds
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"


  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: logistics_dw
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data

  dbt:
    build: ./dbt            # ??? build locally; no GHCR pull
    container_name: dbt
    working_dir: /usr/app
    environment:
      - DBT_PROFILES_DIR=/usr/app        # tells dbt where to find profiles.yml
    command: tail -f /dev/null 
    volumes:
      - ./dbt:/usr/app
    depends_on: [postgres]

  prometheus:
    image: prom/prometheus:v2.54.0
    container_name: prometheus
    restart: unless-stopped
    ports: ["9090:9090"]
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on: [kafka1, kafka2, kafka3, postgres]

  grafana:
    image: grafana/grafana:10.4.5
    container_name: grafana
    restart: unless-stopped
    ports: ["3000:3000"]
    volumes:
      - ./monitoring/grafana_dashboards:/var/lib/grafana/dashboards
    depends_on: [prometheus]

volumes:
  pgdata:


